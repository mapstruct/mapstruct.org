---
layout: base
---
.row
  .span12
    %h2 MapStruct User Guide

.row
  .span9
    .row
      .span9
        :markdown
          This is the MapStruct reference documentation which covers all functionality provided by MapStruct. In case this guide doesn't answer all your questions just join the MapStruct [Google group](https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users) to get help.

          You found a typo or other error in this guide? Your pull request against this web site's [GitHub repository](http://github.com/mapstruct/mapstruct.org) is more than welcome!

    .row
      .span9
        %h3#section-01 1. Introduction
        :markdown
          MapStruct is a Java [annotation processor](http://docs.oracle.com/javase/6/docs/technotes/guides/apt/index.html) for the generation of type-safe bean mapping classes.

          All you have to do is to define a mapper interface which declares any required mapping methods. During compilation, MapStruct will generate an implementation of this interface. This implementation uses plain Java method invocations for mapping between source and target objects, i.e. no reflection or similar.

          Compared to writing mapping code from hand, MapStruct saves time by generating code which is tedious and error-prone to write. Following a convention over configuration approach, MapStruct uses sensible defaults but steps out of your way when it comes to configuring or implementing special behavior.

          Compared to dynamic mapping frameworks, MapStruct offers the following advantages:

          * Fast execution by using plain method invocations instead of reflection
          * Compile-time type safety: Only objects and attributes mapping to each other can be mapped, no accidental mapping of an order entity into a customer DTO etc.
          * Clear error-reports at build time, if entities or attributes can't be mapped

    .row
      .span9
        %h3#section-02 2. Set up

        :markdown
          MapStruct is a Java annotation processor based on [JSR 269](jcp.org/en/jsr/detail?id=269) and as such can be used within command line builds (javac, Ant, Maven etc.) as well as from within your IDE.

          It comprises two artifacts:

          * _org.mapstruct:mapstruct_: contains the required annotations such as `@Mapping`
          * _org.mapstruct:mapstruct-processor_: contains the annotation processor which generates mapper implementations

          For Maven based projects add the following to your POM file in order to use MapStruct:

        %pre.prettyprint.lang-xml.linenums
          = preserve do
            :escaped
              ...
              <properties>
                  <org.mapstruct.version>1.0.0.Alpha2</org.mapstruct.version>
              </properties>
              ...
              <dependencies>
                  <dependency>
                      <groupId>org.mapstruct</groupId>
                      <artifactId>mapstruct</artifactId>
                      <version>${org.mapstruct.version}</version>
                  </dependency>
              </dependencies>
              ...
              <build>
                  <plugins>
                      <plugin>
                          <groupId>org.bsc.maven</groupId>
                          <artifactId>maven-processor-plugin</artifactId>
                          <version>2.2.3</version>
                          <configuration>
                              <defaultOutputDirectory>
                                  ${project.build.directory}/generated-sources
                              </defaultOutputDirectory>
                              <processors>
                                  <processor>org.mapstruct.ap.MappingProcessor</processor>
                              </processors>
                          </configuration>
                          <executions>
                              <execution>
                                  <id>process</id>
                                  <phase>generate-sources</phase>
                                  <goals>
                                      <goal>process</goal>
                                  </goals>
                              </execution>
                          </executions>
                          <dependencies>
                              <dependency>
                                  <groupId>org.mapstruct</groupId>
                                  <artifactId>mapstruct-processor</artifactId>
                                  <version>${org.mapstruct.version}</version>
                              </dependency>
                          </dependencies>
                      </plugin>
                  </plugins>
              </build>

        %h4#section-02-01 2.1 Configuration options

        :markdown
          The MapStruct code generator can be configured using _annotation processor options_.

          When invoking javac directly, these options are passed to the compiler in the form _-Akey=value_. When using MapStruct via Maven, any processor options can be passed using an `options` element within the configuration of the Maven processor plug-in like this:

        %pre.prettyprint.lang-xml.linenums
          = preserve do
            :escaped
              ...
              <plugin>
                  <groupId>org.bsc.maven</groupId>
                  <artifactId>maven-processor-plugin</artifactId>
                  <configuration>
                      <processors>
                          <processor>org.mapstruct.ap.MappingProcessor</processor>
                      </processors>
                      <options>
                          <suppressGeneratorTimestamp>true</suppressGeneratorTimestamp>
                          <defaultComponentModel>cdi</defaultComponentModel>
                      </options>
                      ...
                  </configuration>
                  ...
              <plugin>
              ...

        :markdown
          The following options exist:

        %table.table
          %thead
            %tr
              %th Option
              %th Purpose
              %th Default
          %tbody
            %tr
              %td suppressGeneratorTimestamp
              %td Whether the creation of a time stamp in the generated mapper classes is suppressed or not
              %td
                :markdown
                  `false`
            %tr
              %td defaultComponentModel
              %td
                :markdown
                  The name of the component model (see [section 4.2](#section-04-2)) based on which mappers should be generated. Supported values are:

                %ul
                  %li
                    :markdown
                      `default`: the mapper uses no component model, instances are typically retrieved via `Mappers#getMapper(Class)`
                  %li
                    :markdown
                      `cdi`: the generated mapper is an application-scoped CDI bean and can be retrieved via `@Inject`
                  %li
                    :markdown
                      `spring`: the generated mapper is a singleton-scoped Spring bean and can be retrieved via `@Autowired`
                  %li
                    :markdown
                      `jsr330`: the generated mapper is annotated with {@code @Named} and can be retrieved via `@Inject`, e.g. using Spring

                :markdown
                  If a component model is given for a specific mapper via `@Mapper#componentModel()`, the value from the annotation takes precedence.
              %td
                :markdown
                  `default`

            %tr
              %td unmappedTargetPolicy
              %td
                :markdown
                  The default reporting policy to be applied in case an attribute of the target object of a mapping method is not populated with a source value.
                  Supported values are:

                %ul
                  %li
                    :markdown
                      `ERROR`: any unmapped target property will cause the mapping code generation to fail
                  %li
                    :markdown
                      `WARN`: any unmapped target property will cause a warning at build time
                  %li
                    :markdown
                      `IGNORE`: unmapped target properties are ignored

                :markdown
                  If a policy is given for a specific mapper via `@Mapper#unmappedTargetPolicy()`, the value from the annotation takes precedence.
              %td
                :markdown
                  `WARN`

    .row
      .span9
        %h3#section-03 3. Defining a mapper
        :markdown
          In this section you'll learn how to define a bean mapper with MapStruct and which options you have to do so.

        %h4#section-03-01 3.1 Basic mappings
        :markdown
          To create a mapper simply define a Java interface with the required mapping method(s) and annotate it with the `org.mapstruct.Mapper` annotation:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  @Mappings({
                      @Mapping(source = "make", target = "manufacturer"),
                      @Mapping(source = "numberOfSeats", target = "seatCount")
                  })
                  CarDto carToCarDto(Car car);

                  @Mapping(source = "name", target = "fullName")
                  PersonDto personToPersonDto(Person person);
              }

        :markdown
          The `@Mapper` annotation causes the MapStruct code generator to create an implementation of the `CarMapper` interface during build-time.

          In the generated method implementations all readable properties from the source type (e.g. `Car`) will be copied ino the corresponding property in the target type (e.g. `CarDto`). If a property has a different name in the target entity, its name can be specified via the `@Mapping` annotation.

        .alert.alert-info
          :markdown
            **Tip!** The property name as defined in the [JavaBeans spefication](http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html) must be specified in the `@Mapping` annotation, e.g. _seatCount_ for a property with the accessor methods `getSeatCount()` and `setSeatCount()`.

        :markdown
          To get a better understanding of what MapStruct does have a look at the following implementation of the `carToCarDto()` method as generated by MapStruct:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              // GENERATED CODE
              public class CarMapperImpl implements CarMapper {

                  @Override
                  public CarDto carToCarDto(Car car) {
                      if ( car == null ) {
                          return null;
                      }

                      CarDto carDto = new CarDto();

                      if ( car.getFeatures() != null ) {
                          carDto.setFeatures( new ArrayList<String>( car.getFeatures() ) );
                      }
                      carDto.setManufacturer( car.getMake() );
                      carDto.setSeatCount( car.getNumberOfSeats() );
                      carDto.setDriver( personToPersonDto( car.getDriver() ) );
                      carDto.setPrice( String.valueOf( car.getPrice() ) );
                      if ( car.getCategory() != null ) {
                          carDto.setCategory( car.getCategory().toString() );
                      }

                      return carDto;
                  }

                  //Other methods...
              }

        :markdown
          The general philosophy of MapStruct is to generate code which looks as much as possible as if you had written it yourself from hand. In particular this means that the values are copied from source to target by plain getter/setter invocations instead of reflection or similar.

          As the example shows the generated code takes into account any name mappings specified via `@Mapping`. If the type of a mapped attribute is different in source and target entity, MapStruct will either apply an automatic conversion (as e.g. for the _price_ property, see also [Implicit type conversions](#section-05-01)) or optionally invoke another mapping method (as e.g. for the _driver_ property, see also [Mapping object references](#section-05-02)).

          Collection-typed attributes with the same element type will be copied by creating a new instance of the target collection type containing the elements from the source property. For collection-typed attributes with different element types each element will mapped individually and added to the target collection (see [Mapping collections](#section-06)).

          MapStruct takes all public properties of the source and target types into account. This includes properties declared on super-types.

        %h4#section-03-02 3.2 Mapping methods with several source parameters
        :markdown
          MapStruct also supports mapping methods with several source parameters. This is useful e.g. in order to combine several entities into one data transfer object. The following shows an example:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface AddressMapper {

                  @Mappings({
                      @Mapping(source = "person.description", target = "description"),
                      @Mapping(source = "houseNo", target = "houseNumber")
                  })
                  DeliveryAddressDto personAndAddressToDeliveryAddressDto(Person person, Address address);
              }

        :markdown
          The shown mapping method takes two source parameters and returns a combined target object. As with single-parameter mapping methods properties are mapped by name.

          In case several source objects define a property with the same name, the source parameter from which to retrieve the property must be specified using the `@Mapping` annotation as shown for the `description` property in the example. An error will be raised when such an ambiguity is not resolved. For properties which only exist once in the given source objects it is optional to specify the source parameter's name as it can be determined automatically.

        .alert.alert-info
          :markdown
            **Tip!** Mapping methods with several source parameters will return `null` in case all the source parameters are `null`. Otherwise the target object will be instantiated and all properties from the provided parameters will be propagated.

        %h4#section-03-03 3.3 Updating existing bean instances
        :markdown
          In some cases you need mappings which don't create a new instance of the target type but instead update an existing instance of that type. This sort of mapping can be realized by adding a parameter for the target object and marking this parameter with `@MappingTarget`. The following shows an example:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  void updateCarFromDto(CarDto carDto, @MappingTarget Car car);
              }

        :markdown
          The generated code of the `updateCarFromDto` will upate the passed `Car` instance with the properties from the given `CarDto` object. There may be only one parameter marked as mapping target. Instead of `void` you also set the method's return type to the type of the target parameter, which will cause the generated implementation to update the passed mapping target and return it as well.

    .row
      .span9
        %h3#section-04 4. Retrieving a mapper
        %h4#section-04-01 4.1 The Mappers factory

        :markdown
          Mapper instances can be retrieved via the `org.mapstruct.factory.Mappers` class. Just invoke the `getMapper()` method, passing the interface type of the mapper to return:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              CarMapper mapper = Mappers.getMapper( CarMapper.class );

        :markdown
           By convention, a mapper interface should define a member called `INSTANCE` which holds a single instance of the mapper type:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );

                  CarDto carToCarDto(Car car);
              }

        :markdown
          This pattern makes it very easy for clients to use mapper objects without repeatedly instantiating new instances:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              Car car = ...;
              CarDto dto = CarMapper.INSTANCE.carToCarDto( car );

        :markdown
          Note that mappers generated by MapStruct are thread-safe and thus can safely be accessed from several threads at the same time.

        %h4#section-04-02 4.2 Using dependency injection

        :markdown
          If you're working with a dependency injection framework such as [CDI](http://jcp.org/en/jsr/detail?id=346) (Contexts and Dependency Injection for Java<sup>TM</sup> EE) or the [Spring Framework](http://www.springsource.org/spring-framework), it is recommended to obtain mapper objects via dependency injection as well. For that purpose you can specify the component model which generated mapper classes should be based on either via `@Mapper#componentModel` or using a processor option as described in [section](section-02-01).

          Currently there is support for CDI and Spring (the later either via its custom annotations or using the JSR 330 annotations). See [section](section-02-01) for the allowed values of the `componentModel` attribute which are the same as for the `defaultComponentModel` processor option. In both cases the required annotations will be added to the generated mapper implementations classes in order to make the same subject to dependency injection. The following shows an example using CDI:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper(componentModel = "cdi")
              public interface CarMapper {

                  CarDto carToCarDto(Car car);
              }

        :markdown
          The generated mapper implementation will be marked with the `@ApplicationScoped` annotation and thus can be injected into fields, constructor arguments etc. using the `@Inject` annotation:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Inject
              private CarMapper mapper;

        :markdown
          A mapper which uses other mapper classes (see [section](section-05-03)) will obtain these mappers using the configured component model. So if `CarMapper` from the previous example was using another mapper, this other mapper would have to be an injectable CDI bean as well.

    .row
      .span9
        %h3#section-05 5. Data type conversions
        :markdown
          Not always a mapped attribute has the same type in the source and target objects. For instance an attribute may be of type `int` in the source bean but of type `Long` in the target bean.

          Another example are references to other objects which should be mapped to the corresponding types in the target model. E.g. the class `Car` might have a property `driver` of the type `Person` which needs to be converted into a `PersonDto` object when mapping a `Car` object.

          In this section you'll learn how MapStruct deals with such data type conversions.

        %h4#section-05-01 5.1 Implicit type conversions

        :markdown
          MapStruct takes care of type conversions automatically in many cases. If for instance an attribute is of type `int` in the source bean but of type `String` in the target bean, the generated code will transparently perform a conversion by calling `String#valueOf(int)` and `Integer#parseInt(String)`, respectively.

          Currently the following conversions are applied automatically:

          * Between all Java primitive data types and their corresponding wrapper types, e.g. between `int` and `Integer`, `boolean` and `Boolean` etc. The generated code is `null` aware, i.e. when converting a wrapper type into the corresponding primitive type a `null` check will performed.

          * Between all Java primitive number types and the wrapper types, e.g. between `int` and `long` or `byte` and `Integer`.

        .alert.alert-warn
          :markdown
            **Note!** Converting from larger data types to smaller ones (e.g. from `long` to `int`) can cause a value or precision loss. There [will be](https://github.com/mapstruct/mapstruct/issues/5) an option for raising a warning in such cases in a future MapStruct version.

        :markdown
          * Between all Java primitive types (including their wrappers) and `String`, e.g. between `int` and `String` or `Boolean` and `String`.

          * Between `enum` types and `String`.

          * Between big number types (`java.math.BigInteger`, `java.math.BigDecimal`) and Java primitive types (including their wrappers) as well as String

          * Between `java.util.Date` and `String`. A format string as understood by `java.text.SimpleDateFormat` can be specified via the `dateFormat` option as this:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                @Mapping(source = "manufacturingDate", dateFormat = "dd.MM.yyyy")
                CarDto carToCarDto(Car car);

                @IterableMapping(dateFormat = "dd.MM.yyyy")
                List<String> stringListToDateList(List<Date> dates);
              }

        %h4#section-05-02 5.2 Mapping object references

        :markdown
          Typically an object has not only primitive attributes but also references other objects. E.g. the `Car` class could contain a reference to a `Person` object (representing the car's driver) which should be mapped to a `PersonDto` object referenced by the `CarDto` class.

          In this case just define a mapping method for the referenced object type as well:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  CarDto carToCarDto(Car car);

                  PersonDto personToPersonDto(Person person);
              }

        :markdown
          The generated code for the `carToCarDto()` method will invoke the `personToPersonDto()` method for mapping the `driver` attribute, while the generated implementation for `personToPersonDto()` performs the mapping of person objects.

          That way it is possible to map arbitrary deep object graphs. When mapping from entities into data transfer objects it is often useful to cut references to other entities at a certain point. To do so, implement a custom mapping method (see the next section) which e.g. maps a referenced entity to its id in the target object.

        :markdown
          When generating the implementation of a mapping method, MapStruct will apply the following routine for each attribute pair in the source and target object:

          * If source and target attribute have the same type, the value will be simply copied from source to target. If the attribute is a collection (e.g. a `List`) a copy of the collection will be set into the target attribute.
          * If source and target attribute type differ, check whether there is a another mapping method which has the type of the source attribute as parameter type and the type of the target attribute as return type. If such a method exists it will be invoked in the generated mapping implementation.
          * If no such method exists MapStruct will look whether a built-in conversion for the source and target type of the attribute exists. If this is the case, the generated mapping code will apply this conversion.
          * Otherwise an error will be raised at build time, indicating the non-mappable attribute.

        %h4#section-05-03 5.3 Invoking other mappers

        :markdown
          In addition to methods defined on the same mapper type MapStruct can also invoke mapping methods defined in other classes, be it mappers generated by MapStruct or hand-written mapping methods. This can be useful to structure your mapping code in several classes (e.g. with on mapper type per application module) or you want to provide custom mapping logic which can't be generated by MapStruct.

          For instance the `Car` class might contain an attribute `manufacturingDate` while the corresponding DTO attribute is of type String. In order to map this attribute, you could implement a mapper class like this:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              public class DateMapper {

                  public String asString(Date date) {
                      return date != null ? new SimpleDateFormat( "yyyy-MM-dd" )
                          .format( date ) : null;
                  }

                  public Date asDate(String date) {
                      try {
                          return date != null ? new SimpleDateFormat( "yyyy-MM-dd" )
                              .parse( date ) : null;
                      }
                      catch ( ParseException e ) {
                          throw new RuntimeException( e );
                      }
                  }
              }

        :markdown
          In the `@Mapper` annotation at the `CarMapper` interface reference the `DateMapper` class like this:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper(uses=DateMapper.class)
              public class CarMapper {

                  CarDto carToCarDto(Car car);
              }
        :markdown
          When generating code for the implementation of the `carToCarDto()` method, MapStruct will look for a method which maps a `Date` object into a String, find it on the `DateMapper` class and generate an invocation of `asString()` for mapping the `manufacturingDate` attribute.

          Generated mappers retrieve referenced mappers using the component model configured for them. If e.g. CDI was used as component model for `CarMapper`, `DateMapper` would have to be a CDI bean as well. When using the default component model, any hand-written mapper classes to be referenced by MapStruct generated mappers must declare a public no-args constructor in order to be instantiable.

    .row
      .span9
        %h3#section-06 6. Mapping collections

        :markdown
          The mapping of collection types (`List`, `Set` etc.) is done in the same way as mapping bean types, i.e. by defining mapping methods with the required source and target types in a mapper interface. MapStruct supports a wide range of iterable types from the [Java Collection Framework](http://docs.oracle.com/javase/tutorial/collections/intro/index.html).

          The generated code will contain a loop which iterates over the source collection, converts each element and puts it into the target collection. If a mapping method for the collection element types is found in the given mapper or the mapper it uses, this method is invoked to perform the element conversion. Alternatively, if an implicit conversion for the source and target element types exists, this conversion routine will be invoked. The following shows an example:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  Set<String> integerSetToStringSet(Set<Integer> integers);

                  List<CarDto> carsToCarDtos(List<Car> cars);

                  CarDto carToCarDto(Car car);
              }

        :markdown
          The generated implementation of the `integerSetToStringSet` performs the conversion from `Integer` to `String` for each element, while the generated `carsToCarDtos()` method invokes the `carToCarDto()` method for each contained element as shown in the following:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              //GENERATED CODE
              @Override
              public Set<String> integerSetToStringSet(Set<Integer> integers) {
                  if ( integers == null ) {
                      return null;
                  }

                  Set<String> set = new HashSet<String>();

                  for ( Integer integer : integers ) {
                      set.add( String.valueOf( integer ) );
                  }

                  return set;
              }

              @Override
              public List<CarDto> carsToCarDtos(List<Car> cars) {
                  if ( cars == null ) {
                      return null;
                  }

                  List<CarDto> list = new ArrayList<CarDto>();

                  for ( Car car : cars ) {
                      list.add( carToCarDto( car ) );
                  }

                  return list;
              }

        :markdown
          Note that MapStruct will look for a collection mapping method with matching parameter and return type, when mapping a collection-typed attribute of a bean, e.g. from `Car#passengers` (of type `List<Person>`) to `CarDto#passengers` (of type `List<PersonDto>`).

        .alert.alert-warn
          :markdown
            **Note!** It is not allowed to declare mapping methods with an iterable source and a non-iterable target or the other way around. An error will be raised when detecting this situation.

        :markdown
          Also map-based mapping methods are supported. The following shows an example:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              public interface SourceTargetMapper {

                  @MapMapping(valueDateFormat = "dd.MM.yyyy")
                  Map<String, String> longDateMapToStringStringMap(Map<Long, Date> source);
              }

        :markdown
          Similar to iterable mappings, the generated code will iterate through the source map, convert each value and key (either by means of an implicit conversion or by invoking another mapping method) and put them into the target map:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              //GENERATED CODE
              @Override
              public Map<Long, Date> stringStringMapToLongDateMap(Map<String, String> source) {
                  if ( source == null ) {
                      return null;
                  }

                  Map<Long, Date> map = new HashMap<Long, Date>();

                  for ( Map.Entry<String, String> entry : source.entrySet() ) {

                      Long key = Long.parseLong( entry.getKey() );
                      Date value;
                      try {
                          value = new SimpleDateFormat( "dd.MM.yyyy" ).parse( entry.getValue() );
                      }
                      catch( ParseException e ) {
                          throw new RuntimeException( e );
                      }

                      map.put( key, value );
                  }

                  return map;
              }

        :markdown
          When an iterable or map mapping method declares an interface type as return type, one of its implementation types will be instantiated in the generated code. The following table shows the supported interface types and their corresponding implementation types as instantiated in the generated code:

        %table.table
          %thead
            %tr
              %th Interface type
              %th Implementation type
          %tbody
            %tr
              %td
                :markdown
                  `Iterable`
              %td
                :markdown
                  `ArrayList`
            %tr
              %td
                :markdown
                  `Collection`
              %td
                :markdown
                  `ArrayList`
            %tr
              %td
                :markdown
                  `List`
              %td
                :markdown
                  `ArrayList`
            %tr
              %td
                :markdown
                  `Set`
              %td
                :markdown
                  `HashSet`
            %tr
              %td
                :markdown
                  `SortedSet`
              %td
                :markdown
                  `TreeSet`
            %tr
              %td
                :markdown
                  `NavigableSet`
              %td
                :markdown
                  `TreeSet`
            %tr
              %td
                :markdown
                  `Map`
              %td
                :markdown
                  `HashMap`
            %tr
              %td
                :markdown
                  `SortedMap`
              %td
                :markdown
                  `TreeMap`
            %tr
              %td
                :markdown
                  `NavigableMap`
              %td
                :markdown
                  `TreeMap`
            %tr
              %td
                :markdown
                  `ConcurrentMap`
              %td
                :markdown
                  `ConcurrentHashMap`
            %tr
              %td
                :markdown
                  `ConcurrentNavigableMap`
              %td
                :markdown
                  `ConcurrentSkipListMap`

    .row
      .span9
        %h3#section-07 7. Reverse mappings

        :markdown
          In some cases bi-directional mappings are required, e.g. from entity to DTO and from DTO to entity. For this purpose, simply declare a method with the required parameter and return type on the mapping interface which also declares the forward mapping method:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  @Mapping(source = "numberOfSeats", target = "seatCount")
                  CarDto carToCarDto(Car car);

                  Car carDtoToCar(CarDto carDto);
              }

        :markdown
          Here the `carDtoToCar()` method is the reverse mapping method for `carToCarDto()`. Note that any attribute mappings only have to be specified at one of the two methods and will be applied to the corresponding reverse mapping method as well.

  .span3
    #toc{ :"data-offset-top"=>"0", :"data-spy"=>"affix" }
      %h5 Contents
      %ol.nav.nav-list
        %li.active
          %a{ :href=>"#section-01" } Introduction
        %li
          %a{ :href=>"#section-02" } Set up
        %li
          %a{ :href=>"#section-03" } Defining a mapper
        %li
          %a{ :href=>"#section-04" } Retrieving a mapper
        %li
          %a{ :href=>"#section-05" } Data type conversions
        %li
          %a{ :href=>"#section-06" } Mapping collections
        %li
          %a{ :href=>"#section-07" } Reverse mappings

    :javascript
      (function(jQuery){
        jQuery( document ).ready( function() {
          $(document.body).scrollspy({
            target: "#toc"
          });
        });
      }(jQuery))
